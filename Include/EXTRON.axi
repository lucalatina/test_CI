PROGRAM_NAME='EXTRON'
(***********************************************************)
(***********************************************************)
(*  FILE_LAST_MODIFIED_ON: 23/06/2015  AT: 09:00:25        *)
(***********************************************************)
(* System Type : NetLinx                                   *)
(***********************************************************)
(* REV HISTORY:    1.0                                     *)
(***********************************************************)
(*
    $History: $ First Commit
    EXTRON PROTOCOL AND GUI'S STUFF
    
    Author: Luca PERER
    
    CAVO DELLA MATRICE DRITTO!
*)
(***********************************************************)
(*               CONSTANT DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_CONSTANT

INTEGER EXTRON_MAX_BUFFER_SIZE = 1024
INTEGER EXTRON_MAX_OUTPUTS = 4
INTEGER EXTRON_MAX_INPUTS = 8


//+1 perchè la 17 è il test pattern (T1)
char MATRIX_LABEL_EXTRON[EXTRON_MAX_INPUTS + 1][15] = {'PC Regia','Program','IN 3','IN 4','IN 5','PT Rack','Tav 1','Tav 2','TEST'}


INTEGER BT_EXTRON_CHANNEL_INPUTS[EXTRON_MAX_INPUTS] = {1,2,3,4,5,6,7,8}

INTEGER BT_EXTRON_CHANNEL_OUTPUTS[EXTRON_MAX_OUTPUTS] = {11,12,13,14}
INTEGER BT_EXTRON_AUDIO_CHANNEL_OUTPUTS[EXTRON_MAX_OUTPUTS] = {21,22,23,24}

INTEGER BUTTON_RELOAD_EXTRON = 101

DEFINE_VARIABLE

//VARIABILE DI DEBUG PER VISUALIZZARE I LOG IN TEMPO REALE
INTEGER DEBUG_EXTRON = 1

//VARIABILE PER INGRESSO SCELTO
INTEGER MAT_VIDEO_IN_SCELTO_1_EXTRON

//VARIABILE PER USCITA SCELTA
INTEGER MAT_VIDEO_OUT_SCELTO_1_EXTRON
INTEGER MAT_AUDIO_OUT_SCELTO_1_EXTRON

//VARIABILE PER TESTO LABEL USCITA
CHAR MAT_VIDEO_DESCRIZIONE_1_EXTRON[15]



//VARIABILE PER MEMORIZZAZIONE STATO MATRICE
PERSISTENT INTEGER MAT_VIDEO_IN_OUT_EXTRON[EXTRON_MAX_OUTPUTS] = {0,0,0,0}
PERSISTENT INTEGER MAT_AUDIO_IN_OUT_EXTRON[EXTRON_MAX_OUTPUTS] = {0,0,0,0}

DEFINE_MUTUALLY_EXCLUSIVE

DEFINE_FUNCTION AGG_EXTRON(DEV PORTA)
{
    local_var integer i
    LOCAL_VAR CHAR DESC[10]
    local_var dev VTP
    
    for (i=1;i<=EXTRON_MAX_OUTPUTS;i++)
    {
	IF (MAT_VIDEO_IN_OUT_EXTRON[i]>0)
	   DESC = MATRIX_LABEL_EXTRON[MAT_VIDEO_IN_OUT_EXTRON[i]] 
	ELSE
	    DESC = "'OUT ',ITOA(i)"
	    
	SEND_VTEXT(PORTA,BT_EXTRON_CHANNEL_OUTPUTS[i],DESC)
    }
}

DEFINE_CALL 'CLEAR_EXTRON_AUDIO' (DEV PORTA, integer OUT)
{
    SEND_STRING PORTA,"'0*',ITOA(OUT),'$',13,10"
    IF (PORTA == EXTRON) MAT_AUDIO_IN_OUT_EXTRON[OUT] = 0
}
DEFINE_CALL 'CLEAR_EXTRON_VIDEO' (DEV PORTA, integer OUT)
{
    SEND_STRING PORTA,"'0*',ITOA(OUT),'%',13,10"
    IF (PORTA == EXTRON) MAT_VIDEO_IN_OUT_EXTRON[OUT] = 0
}


DEFINE_CALL 'EXTRON_CONTROL_AUDIO' (DEV PORTA, INTEGER IN, INTEGER OUT)
{
    SEND_STRING PORTA,"ITOA(IN),'*',ITOA(OUT),'$',13,10"
    IF (IN > 0)
	SEND_EXTRON_VTEXT(BT_EXTRON_AUDIO_CHANNEL_OUTPUTS[OUT],MATRIX_LABEL_EXTRON[IN])
    ELSE
	SEND_EXTRON_VTEXT(BT_EXTRON_AUDIO_CHANNEL_OUTPUTS[OUT],ITOA(IN))
    IF (PORTA == EXTRON) MAT_AUDIO_IN_OUT_EXTRON[OUT] = IN
}

DEFINE_CALL 'EXTRON_CONTROL_VIDEO' (DEV PORTA, INTEGER IN, INTEGER OUT)
{
    SEND_STRING PORTA,"ITOA(IN),'*',ITOA(OUT),'!',13,10"
    IF (IN > 0){
	SEND_EXTRON_VTEXT(BT_EXTRON_CHANNEL_OUTPUTS[OUT],MATRIX_LABEL_EXTRON[IN])
	SEND_EXTRON_VTEXT(BT_EXTRON_AUDIO_CHANNEL_OUTPUTS[OUT],MATRIX_LABEL_EXTRON[IN])
    }
    ELSE {
	SEND_EXTRON_VTEXT(BT_EXTRON_CHANNEL_OUTPUTS[OUT],ITOA(IN))
	SEND_EXTRON_VTEXT(BT_EXTRON_AUDIO_CHANNEL_OUTPUTS[OUT],ITOA(IN))
    }
    IF (PORTA == EXTRON) MAT_VIDEO_IN_OUT_EXTRON[OUT] = IN
}


DEFINE_FUNCTION SEND_EXTRON_VTEXT(INTEGER CHAN, CHAR LABEL[]){
    STACK_VAR INTEGER P
    FOR(P=1;P<=LENGTH_ARRAY(vTP_EXTRON);P++)
    {
	SEND_VTEXT(vTP_EXTRON[P],CHAN,LABEL)
    }
}

DEFINE_EVENT

DATA_EVENT[EXTRON]
{
  ONLINE :                          // Communication Parameters
  {
    //SEND_COMMAND EXTRON,"'IROFF'"
    //SEND_COMMAND EXTRON,"'CAROFF'"
    SEND_COMMAND EXTRON,"'SET MODE DATA'"
    SEND_COMMAND EXTRON,"'SET BAUD 9600,N,8,1'"
    //SEND_COMMAND EXTRON,"'HSOFF'"
    //SEND_COMMAND EXTRON,"'XOFF'"
  }
  STRING  :
  {
    IF( DEBUG_EXTRON )
    {
      SEND_STRING 0,"'EXTRON - FROM DEVICE: ',EXPLODE_HEX_STRING(DATA.TEXT)"
    }  
  }
  COMMAND:
  {
    SEND_STRING 0, "'COMMAND: ', DATA.TEXT"
  }
}


(***********************************************************)
(*                      GUI EVENTS                         *)
(***********************************************************)

// TOUCH PANEL 
BUTTON_EVENT[vTP_EXTRON, BT_EXTRON_CHANNEL_OUTPUTS]
{
    PUSH:
    {
	IF (MAT_VIDEO_IN_SCELTO_1_EXTRON > 0){
	    MAT_VIDEO_OUT_SCELTO_1_EXTRON = GET_LAST(BT_EXTRON_CHANNEL_OUTPUTS)
	    SEND_EXTRON_VTEXT(BT_EXTRON_CHANNEL_OUTPUTS[MAT_VIDEO_OUT_SCELTO_1_EXTRON],MAT_VIDEO_DESCRIZIONE_1_EXTRON)
	    CALL 'EXTRON_CONTROL_VIDEO' (EXTRON,MAT_VIDEO_IN_SCELTO_1_EXTRON,MAT_VIDEO_OUT_SCELTO_1_EXTRON)
	} ELSE {
	    MAT_VIDEO_OUT_SCELTO_1_EXTRON = GET_LAST(BT_EXTRON_CHANNEL_OUTPUTS)
	    SEND_EXTRON_VTEXT(BT_EXTRON_CHANNEL_OUTPUTS[MAT_VIDEO_OUT_SCELTO_1_EXTRON],'')
	    CALL 'CLEAR_EXTRON_VIDEO' (EXTRON,MAT_VIDEO_OUT_SCELTO_1_EXTRON)
	    //CALL 'EXTRON_CONTROL' (EXTRON,MAT_VIDEO_IN_SCELTO_1,MAT_VIDEO_OUT_SCELTO_1)
	}
    }
}

BUTTON_EVENT[vTP_EXTRON, BT_EXTRON_AUDIO_CHANNEL_OUTPUTS]
{
    PUSH:
    {
	IF (MAT_VIDEO_IN_SCELTO_1_EXTRON > 0){
	    MAT_AUDIO_OUT_SCELTO_1_EXTRON = GET_LAST(BT_EXTRON_AUDIO_CHANNEL_OUTPUTS)
	    SEND_EXTRON_VTEXT(BT_EXTRON_CHANNEL_OUTPUTS[MAT_AUDIO_OUT_SCELTO_1_EXTRON],MAT_VIDEO_DESCRIZIONE_1_EXTRON)
	    CALL 'EXTRON_CONTROL_VIDEO' (EXTRON,MAT_VIDEO_IN_SCELTO_1_EXTRON,MAT_AUDIO_OUT_SCELTO_1_EXTRON)
	} ELSE {
	    MAT_AUDIO_OUT_SCELTO_1_EXTRON = GET_LAST(BT_EXTRON_AUDIO_CHANNEL_OUTPUTS)
	    SEND_EXTRON_VTEXT(BT_EXTRON_AUDIO_CHANNEL_OUTPUTS[MAT_AUDIO_OUT_SCELTO_1_EXTRON],'')
	    CALL 'CLEAR_EXTRON_VIDEO' (EXTRON,MAT_AUDIO_OUT_SCELTO_1_EXTRON)
	    //CALL 'EXTRON_CONTROL' (EXTRON,MAT_VIDEO_IN_SCELTO_1,MAT_VIDEO_OUT_SCELTO_1)
	}
    }
}

BUTTON_EVENT[vTP_EXTRON, BT_EXTRON_CHANNEL_INPUTS]
{
    PUSH:
    {
	LOCAL_VAR INTEGER BT_LAST
	
	OFF[vTP_EXTRON,BT_EXTRON_CHANNEL_INPUTS]
	ON[vTP_EXTRON,PUSH_CHANNEL]
	BT_LAST = GET_LAST(BT_EXTRON_CHANNEL_INPUTS)
	IF (MAT_VIDEO_IN_SCELTO_1_EXTRON == BT_LAST)
	{
	    MAT_VIDEO_IN_SCELTO_1_EXTRON = 0
	    OFF[vTP_EXTRON,BT_EXTRON_CHANNEL_INPUTS]
	}
	ELSE
	{
	    MAT_VIDEO_IN_SCELTO_1_EXTRON = GET_LAST(BT_EXTRON_CHANNEL_INPUTS)
	    MAT_VIDEO_DESCRIZIONE_1_EXTRON = MATRIX_LABEL_EXTRON[MAT_VIDEO_IN_SCELTO_1_EXTRON]
	}
    }
}


BUTTON_EVENT[TP1_MENU, BUTTON_RELOAD_EXTRON]
{
    PUSH:
    {
	STACK_VAR INTEGER P
	FOR(P=1;P<=LENGTH_ARRAY(vTP_EXTRON);P++)
	{
	    AGG_EXTRON(vTP_EXTRON[P])
	}
    }
}
