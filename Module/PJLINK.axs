MODULE_NAME='PJLINK'(DEV BRAND_MODEL_vdv_Device, DEV BRAND_MODEL_Client_Device, DEV ADV_TP)

(***********************************************************)
(***********************************************************)
(*  FILE_LAST_MODIFIED_ON: 04/04/2006  AT: 11:33:16        *)
(***********************************************************)
(* System Type : NetLinx                                   *)
(***********************************************************)
(* REV HISTORY:                                            *)
(***********************************************************)
(*
    $History: $
*)
(***********************************************************)
(*          DEVICE NUMBER DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_DEVICE


(***********************************************************)
(*               CONSTANT DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_CONSTANT

LONG BRAND_MODEL_IP_PORT=4352
INTEGER BRAND_MODEL_TCP_MODE=IP_TCP
INTEGER BRAND_MODEL_RECONNECT_TIME=30

BRAND_MODEL_DELIMETER[] = {13}
TL_ID_HEARTBEAT=1
LONG TL_ARRAY_HEARTBEAT[]={4000,4000}

TL_ID_FB=2
LONG TL_ARRAY_FB[]={300}

INTEGER BT_LAMP = 1
INTEGER BT_ERROR_1 = 10
INTEGER BT_ERROR_2 = 11
INTEGER BT_ERROR_3 = 12
INTEGER BT_ERROR_4 = 13
INTEGER BT_ERROR_5 = 14
INTEGER BT_ERROR_6 = 15
INTEGER BT_RELOAD = 101
INTEGER BT_CONNECTED = 100


// INTEGER BT_ADDR

// NAME = 20
// MANUFACTURER = 21
// MODEL = 22
// SERIAL_NUMBER = 23
// SW_VERSION = 24
// PJLINK = 25
// INFO = 26
// INPUT_LIST = 27

// LAMP_NAME = 2
// LAMP_HOUR = 3
// FILTER_NAME = 4
// FILTER_HOUR = 5

// ERROR_1 = 10
// ERROR_2 = 11
// ERROR_3 = 12
// ERROR_4 = 13
// ERROR_5 = 14
// ERROR_6 = 15



CHAR GET_POWER_STRING[]={'%1POWR ?'}
CHAR GET_INPUT_STRING[]={'%1INPT ?'}

(***********************************************************)
(*              DATA TYPE DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_TYPE

//#INCLUDE 'Funzioni'

(***********************************************************)
(*               VARIABLE DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_VARIABLE

VOLATILE CHAR BRAND_MODEL_IP_ADDR[100] = ''//'192.168.1.18'

VOLATILE CHAR BRAND_MODEL_CONNECTED
VOLATILE CHAR BRAND_MODEL_TALKING 
VOLATILE CHAR BRAND_MODEL_FLAG

VOLATILE CHAR BRAND_MODEL_DEBUG = 0

VOLATILE CHAR BRAND_MODEL_BUFF[255]
VOLATILE CHAR BRAND_MODEL_vdv_BUFF[255]
VOLATILE CHAR BRAND_MODEL_MSG[255]
VOLATILE CHAR BRAND_MODEL_LAST_MSG_SENT[255]
VOLATILE CHAR BRAND_MODEL_MSG_RECEIVED[255]
VOLATILE CHAR BRAND_MODEL_PACKET[50]

VOLATILE CHAR IDX

INTEGER CURRENT_STATUS = 3
INTEGER CURRENT_INPUT = 1000

CHAR LAMP_MODEL[16]
CHAR FILTER_MODEL[16]
INTEGER FILTER_HOUR
INTEGER LAMP_HOUR
INTEGER LAMP_STATUS
INTEGER ERROR[6]
CHAR INPUT_LIST[16]
CHAR MANUFACTURER[16]
CHAR MODEL[30]
CHAR OTHER_INFO[16]
CHAR NAME[16]
CHAR SERIAL_NUMBER[16]
CHAR FW_VERSION[16]
CHAR PJLINK_CLASS[10]

(***********************************************************)
(*               LATCHING DEFINITIONS GO BELOW             *)
(***********************************************************)
DEFINE_LATCHING

(***********************************************************)
(*       MUTUALLY EXCLUSIVE DEFINITIONS GO BELOW           *)
(***********************************************************)
DEFINE_MUTUALLY_EXCLUSIVE

(***********************************************************)
(*        SUBROUTINE/FUNCTION DEFINITIONS GO BELOW         *)
(***********************************************************)
(* EXAMPLE: DEFINE_FUNCTION <RETURN_TYPE> <NAME> (<PARAMETERS>) *)
(* EXAMPLE: DEFINE_CALL '<NAME>' (<PARAMETERS>) *)

DEFINE_CALL 'BRAND_MODEL_APERTURA_PORTA'
{
    IF (LENGTH_ARRAY(BRAND_MODEL_IP_ADDR) > 0)
    {
	IF (BRAND_MODEL_Client_Device.NUMBER == 0)
	{
	IF (NOT BRAND_MODEL_CONNECTED)
	    IP_CLIENT_OPEN(BRAND_MODEL_Client_Device.PORT,BRAND_MODEL_IP_ADDR,BRAND_MODEL_IP_PORT,BRAND_MODEL_TCP_MODE)
	
	IF (BRAND_MODEL_DEBUG)
	    SEND_STRING 0:1:0,'IP BRAND_MODEL_Client_Device Connection --> Open BRAND_MODEL_IP_PORT'
	}
    }
    ELSE IF (BRAND_MODEL_DEBUG){
	SEND_STRING 0,"'PJLINK, IP NOT SET'"
    }
}

DEFINE_CALL 'BRAND_MODEL_CHIUSURA_PORTA'
{
    IF (BRAND_MODEL_Client_Device.NUMBER == 0)
    {
	IF (BRAND_MODEL_CONNECTED)
	    IP_CLIENT_CLOSE (BRAND_MODEL_Client_Device.PORT)
    
	IF (BRAND_MODEL_DEBUG)
	    SEND_STRING 0:1:0,'IP BRAND_MODEL_Client_Device Connection --> Close BRAND_MODEL_IP_PORT'
    }
}

DEFINE_CALL 'RELOAD_ERROR'(CHAR ERRORE[6])
{
    STACK_VAR INTEGER J
    
    ERROR[1] = ATOI("ERRORE[1]")
    ERROR[2] = ATOI("ERRORE[2]")
    ERROR[3] = ATOI("ERRORE[3]")
    ERROR[4] = ATOI("ERRORE[4]")
    ERROR[5] = ATOI("ERRORE[5]")
    ERROR[6] = ATOI("ERRORE[6]")
    
    FOR(J=1;J<=6;J++)
    {
	SWITCH (ERROR[J])
	{
	    CASE 0:
	    {
		SEND_VTEXT (ADV_TP, 9+J, 'OK')
		[ADV_TP,9+J] = 0
	    }
	    CASE 1:
	    {
		SEND_VTEXT (ADV_TP, 9+J, 'WARNING')
		[ADV_TP,9+J] = 1
	    }
	    CASE 2:
	    {
		SEND_VTEXT (ADV_TP, 9+J, 'ERROR')
		[ADV_TP,9+J] = 2
	    }
	}
    }
    //SEND_VTEXT (ADV_TP, 2, FILTER_MODEL)
}

//FUNZIONE KE SCRIVE IL TESTO ALL'INTERNO DI UN PULSANTE; SI PASSA DEVICE (TP_RELATIVO), CANALE (ADDRESS CODE) E TESTO
DEFINE_FUNCTION SEND_VTEXT (DEV VP, INTEGER nCHAN, CHAR strMSG[])
{
    //SEND_COMMAND VP, "'^BMF-',itoa(nCHAN),',0,%T',strMSG"
    SEND_COMMAND VP, "'^TXT-',itoa(nCHAN),',0,',strMSG"
    //SEND_COMMAND VP,"'!T',nCHAN,strMsg"
}

DEFINE_FUNCTION CHAR TROVATO_MESSAGGIO()
LOCAL_VAR
CHAR RESULT
{
    ON[RESULT]
    RETURN RESULT
}

DEFINE_CALL 'BRAND_MODEL_INTERPRETA_MESSAGGIO' (CHAR TXT[])
{
    STACK_VAR CHAR TEMP[100]
    OFF[BRAND_MODEL_FLAG]
    CANCEL_WAIT 'DELAY_BRAND_MODEL_FLAG_TALKING'
    ON[BRAND_MODEL_TALKING]
    
    SET_LENGTH_ARRAY(TXT,LENGTH_ARRAY(TXT)-1)
    
    SELECT
    {	
	ACTIVE (FIND_STRING(TXT,"'%1POWR='",1)) :
	{
	    REMOVE_STRING(TXT,"'%1POWR='",1)
	    IF ((FIND_STRING(TXT,'1',1)) AND (CURRENT_STATUS != 1))
	    {
		CURRENT_STATUS = 1
		SEND_STRING BRAND_MODEL_vdv_Device,"'EVENT_POWER_ON'"
	    }
	    ELSE IF ((FIND_STRING(TXT,'0',1)) AND (CURRENT_STATUS != 0))
	    {
		CURRENT_STATUS = 0
		SEND_STRING BRAND_MODEL_vdv_Device,"'EVENT_POWER_OFF'"
	    }
	    ELSE IF (FIND_STRING(TXT,'OK',1))
	    {
		SEND_STRING BRAND_MODEL_vdv_Device,"'POWER_COMMAND_ACK'"
	    }
	    ELSE IF (FIND_STRING(TXT,'ERR',1))
	    {
		REMOVE_STRING(TXT,"'ERR'",1)
		SEND_STRING BRAND_MODEL_vdv_Device,"'POWER_COMMAND_ERROR ',TXT"
	    }
	}
	ACTIVE (FIND_STRING(TXT,"'%1INPT='",1)) :
	{
	    REMOVE_STRING(TXT,"'%1INPT='",1)
	    IF(FIND_STRING(TXT,'ERR',1))
	    {
		//REMOVE_STRING(TXT,"'ERR'",1)
		SEND_STRING BRAND_MODEL_vdv_Device,"'INPUT_COMMAND_ERROR ',TXT"
	    }
	    ELSE IF(FIND_STRING(TXT,'OK',1))
	    {
		SEND_STRING BRAND_MODEL_vdv_Device,"'INPUT_COMMAND_ACK'"
	    }
	    ELSE IF (CURRENT_INPUT != ATOI(TXT))
	    {
		CURRENT_INPUT = ATOI(TXT)
		SEND_STRING BRAND_MODEL_vdv_Device,"'EVENT_NEW_INPUT=',ITOA(CURRENT_INPUT)"
	    }
	}
	ACTIVE (FIND_STRING(TXT,"'%2RLMP='",1)):
	{
	    REMOVE_STRING(TXT,"'%2RLMP='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'LAMP REPLACEMENT MODEL QUERY: ', TXT"
	    LAMP_MODEL = TXT
	    SEND_VTEXT (ADV_TP, 2, LAMP_MODEL)
	}
	ACTIVE (FIND_STRING(TXT,"'%2RFIL='",1)):
	{
	    REMOVE_STRING(TXT,"'%2RFIL='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'FILTER REPLACEMENT MODEL QUERY: ', TXT"
	    FILTER_MODEL = TXT
	    SEND_VTEXT (ADV_TP, 4, FILTER_MODEL)
	}
	ACTIVE (FIND_STRING(TXT,"'%2FILT='",1)):
	{
	    REMOVE_STRING(TXT,"'%2FILT='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'FILTER USAGE TIME QUERY: ', TXT"
	    FILTER_HOUR = ATOI(TXT)
	    SEND_VTEXT (ADV_TP, 5, TXT)
	}
	ACTIVE (FIND_STRING(TXT,"'%1LAMP='",1)):
	{
	    REMOVE_STRING(TXT,"'%1LAMP='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'LAMP TIME & STATUS QUERY: ', TXT"
	    LAMP_HOUR = ATOI(REMOVE_STRING(TXT,"' '",1))
	    SEND_VTEXT (ADV_TP, 3, ITOA(LAMP_HOUR))
	    IF (FIND_STRING(TXT,'0',1)) OFF[LAMP_STATUS]
	    ELSE IF (FIND_STRING(TXT,'1',1)) ON[LAMP_STATUS]
	}
	ACTIVE (FIND_STRING(TXT,"'%1ERST='",1)):
	{
	    REMOVE_STRING(TXT,"'%1ERST='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'ERROR STATUS QUERY: ', TXT"
	    CALL 'RELOAD_ERROR'(TXT)
	}
	ACTIVE (FIND_STRING(TXT,"'%2INST='",1)):
	{
	    REMOVE_STRING(TXT,"'%2INST='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'INPUT LIST QUERY: ', TXT"
	    INPUT_LIST = TXT
	    SEND_VTEXT (ADV_TP, 27, INPUT_LIST)
	}
	ACTIVE (FIND_STRING(TXT,"'%1INF1='",1)):
	{
	    REMOVE_STRING(TXT,"'%1INF1='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'MANUFACTURER NAME QUERY: ', TXT"
	    MANUFACTURER = TXT
	    SEND_VTEXT (ADV_TP, 21, MANUFACTURER)
	}
	ACTIVE (FIND_STRING(TXT,"'%1INF2='",1)):
	{
	    REMOVE_STRING(TXT,"'%1INF2='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'MANUFACTURER MODEL QUERY: ', TXT"
	    MODEL = TXT
	    SEND_VTEXT (ADV_TP, 22, MODEL)
	}
	ACTIVE (FIND_STRING(TXT,"'%1INFO='",1)):
	{
	    REMOVE_STRING(TXT,"'%1INFO='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'OTHER INFO QUERY: ', TXT"
	    OTHER_INFO = TXT
	    SEND_VTEXT (ADV_TP, 26, OTHER_INFO)
	}
	ACTIVE (FIND_STRING(TXT,"'%1NAME='",1)):
	{
	    REMOVE_STRING(TXT,"'%1NAME='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'DEVICE NAME QUERY: ', TXT"
	    NAME = TXT
	    SEND_VTEXT (ADV_TP, 20, NAME)
	}
	ACTIVE (FIND_STRING(TXT,"'%1CLSS='",1)):
	{
	    REMOVE_STRING(TXT,"'%1CLSS='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'DEVICE PJLINK CLASS QUERY: ', TXT"
	    PJLINK_CLASS = TXT
	    SEND_VTEXT (ADV_TP, 25, PJLINK_CLASS)
	}
	ACTIVE (FIND_STRING(TXT,"'%2SNUM='",1)):
	{
	    REMOVE_STRING(TXT,"'%2SNUM='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'SERIAL NUMBER QUERY: ', TXT"
	    SERIAL_NUMBER = TXT
	    SEND_VTEXT (ADV_TP, 23, SERIAL_NUMBER)
	}
	ACTIVE (FIND_STRING(TXT,"'%2SVER='",1)):
	{
	    REMOVE_STRING(TXT,"'%2SVER='",1)
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'SW/FW VERSION QUERY: ', TXT"
	    FW_VERSION = TXT
	    SEND_VTEXT (ADV_TP, 24, FW_VERSION)
	}
	ACTIVE (FIND_STRING(TXT,"'PJLINK 0'",1)):
	{
	    SEND_STRING BRAND_MODEL_vdv_Device,"'PJLINK - CONNECTION OK (', TXT,')'"
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'PJLINK - CONNECTION OK (', TXT,')'"
	}
	ACTIVE (1):
	{
	    SEND_STRING BRAND_MODEL_vdv_Device,"'PJLINK - UNKNOWN STRING RECEIVED! - ', TXT"
	    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'PJLINK - UNKNOWN STRING RECEIVED! - ', TXT"
	}
    }
}


DEFINE_CALL 'SET_POWER'(INTEGER NEW_STATUS)
{
    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'PJLINK SET_POWER ', ITOA(NEW_STATUS)"
    IF ((NEW_STATUS <=1) AND (NEW_STATUS != CURRENT_STATUS))
    {
	CALL 'BRAND_MODEL_SEND_STRING' ("'%1POWR ',ITOA(NEW_STATUS)")
    }
}

DEFINE_CALL 'SET_INPUT'(CHAR NEW_INPUT[])
{
    IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'PJLINK SET_INPUT ', NEW_INPUT"
    SWITCH (NEW_INPUT)
    {
	CASE 'HDMI': CALL 'BRAND_MODEL_SEND_STRING' ("'%1INPT 32'")
	CASE 'DVI': CALL 'BRAND_MODEL_SEND_STRING' ("'%1INPT 31'")
	CASE 'VGA': CALL 'BRAND_MODEL_SEND_STRING' ("'%1INPT 11'")
	CASE 'VIDEO': CALL 'BRAND_MODEL_SEND_STRING' ("'%1INPT 21'")
	CASE 'HDBASET': CALL 'BRAND_MODEL_SEND_STRING' ("'%1INPT 56'")
    }
}

DEFINE_CALL 'GET_ALL_INFO'()
{
    //LAMP REPLACEMENT MODEL QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%2RLMP ?'")
    
    //FILTER REPLACEMENT MODEL QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%2RFIL ?'")
    
    //FILTER USAGE TIME QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%2FILT ?'")
    
    //LAMP TIME & STATUS QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%1LAMP ?'")
    
    //ERROR STATUS QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%1ERST ?'")
    
    //INPUT LIST QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%2INST ?'")
    
    //MANUFACTURER NAME QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%1INF1 ?'")
    
    //MANUFACTURER MODEL QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%1INF2 ?'")
    
    //OTHER INFO QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%1INFO ?'")
    
    //DEVICE NAME QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%1NAME ?'")
    
    //SERIAL NUMBER QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%2SNUM ?'")
    
    // SW/FW VERSION QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%2SVER ?'")
    
    //PJLINK CLASS QUERY
    CALL 'BRAND_MODEL_SEND_STRING' ("'%1CLSS ?'")
}

DEFINE_CALL 'BRAND_MODEL_SEND_STRING' (CHAR TXT[])
LOCAL_VAR
CHAR CHECKSUM
CHAR BYTE
INTEGER	 COUNT
{
    BRAND_MODEL_MSG="TXT,$0D"

    IF (BRAND_MODEL_CONNECTED)
    {
    
	BRAND_MODEL_LAST_MSG_SENT="BRAND_MODEL_MSG"
	SEND_STRING BRAND_MODEL_Client_Device,"BRAND_MODEL_LAST_MSG_SENT"
    
	IF (BRAND_MODEL_DEBUG)
	    SEND_STRING 0:1:0,"'IP BRAND_MODEL_Client_Device Sending=',EXPLODE_HEX_STRING(BRAND_MODEL_LAST_MSG_SENT)"
	    
	ON[BRAND_MODEL_FLAG]
	CANCEL_WAIT 'DELAY_BRAND_MODEL_FLAG_TALKING'
	WAIT 10 'DELAY_BRAND_MODEL_FLAG_TALKING'
	{
	    IF (BRAND_MODEL_FLAG)
	    {
		OFF[BRAND_MODEL_TALKING]
	    }
	}
    }
}

DEFINE_FUNCTION CHAR[255] FIND_PARAMETERS(CHAR TXT[], CHAR DELIMIT[], INTEGER POS)
LOCAL_VAR
CHAR RESULT[255]
{
    RESULT=REMOVE_STRING(TXT,"DELIMIT",POS)
    RETURN RESULT
}

DEFINE_FUNCTION CHAR[355] EXPLODE_HEX_STRING(CHAR TXT[])
LOCAL_VAR
CHAR RESULT[355]
{
    RESULT=""
    FOR (IDX=1;IDX<=LENGTH_ARRAY(TXT);IDX++)
    {
	RESULT="RESULT,'$',FORMAT('%02x',TXT[IDX]),','"
    }
    
    RETURN RESULT
}

(***********************************************************)
(*                STARTUP CODE GOES BELOW                  *)
(***********************************************************)
DEFINE_START

CREATE_BUFFER BRAND_MODEL_Client_Device,BRAND_MODEL_BUFF

REBUILD_EVENT()

TIMELINE_CREATE (TL_ID_HEARTBEAT,TL_ARRAY_HEARTBEAT,2,TIMELINE_RELATIVE,TIMELINE_REPEAT)
TIMELINE_CREATE (TL_ID_FB,TL_ARRAY_FB,1,TIMELINE_RELATIVE,TIMELINE_REPEAT)

CALL 'GET_ALL_INFO'()

(***********************************************************)
(*                THE EVENTS GO BELOW                      *)
(***********************************************************)
DEFINE_EVENT

DATA_EVENT[BRAND_MODEL_Client_Device]
    {
    ONLINE:
    {
	ON[BRAND_MODEL_CONNECTED]
	
	SEND_STRING BRAND_MODEL_vdv_Device,"'DEVICE_ONLINE'"
	
	IF (BRAND_MODEL_DEBUG)
	    SEND_STRING 0:1:0,'IP BRAND_MODEL_Client_Device Connection --> Online'
	//CALL 'SET_ECHO_OFF'()
	IF (BRAND_MODEL_Client_Device.NUMBER)
	{
	// CONFIGURAZIONI SERIALI
	
	    SEND_COMMAND DATA.DEVICE,"'SET BAUD 115200,N,8,1 485 DISABLE'"
	    SEND_COMMAND DATA.DEVICE,"'HSOFF'"
	    SEND_COMMAND DATA.DEVICE,"'XOFF'"
	}
    }
    
    OFFLINE:
    {
	OFF[BRAND_MODEL_CONNECTED]
	SEND_STRING BRAND_MODEL_vdv_Device,"'DEVICE_OFFLINE'"
	
	
	IF (BRAND_MODEL_DEBUG)
	    SEND_STRING 0:1:0,'IP BRAND_MODEL_Client_Device Connection --> Offline'
	    
	IF ((BRAND_MODEL_Client_Device.NUMBER == 0) AND (BRAND_MODEL_RECONNECT_TIME))
	{
	    CANCEL_WAIT 'BRAND_MODEL_DELAY_RECONNECT'
	    WAIT BRAND_MODEL_RECONNECT_TIME 'BRAND_MODEL_DELAY_RECONNECT'
	    {
		CALL 'BRAND_MODEL_APERTURA_PORTA'
	    }
	}
    }
    
    ONERROR:
    {
	IF (BRAND_MODEL_Client_Device.NUMBER == 0)
	{
	    IF (BRAND_MODEL_DEBUG)
		SEND_STRING 0:1:0,"'IP BRAND_MODEL_Client_Device Connection --> Socket Error ',ITOA(DATA.NUMBER)"

	    IF (DATA.NUMBER == 14)
	    {
		ON[BRAND_MODEL_CONNECTED]
	    }
	    
	    SWITCH (DATA.NUMBER)
	    {
		CASE  2 : 
		CASE  4 : 
		CASE  6 : 
		CASE  7 : 
		CASE  8 : 
		CASE 13 : 
		CASE 14 : 
		{
		    CANCEL_WAIT 'BRAND_MODEL_DELAY_RECONNECT'
		    CALL 'BRAND_MODEL_CHIUSURA_PORTA'
		    IF (BRAND_MODEL_RECONNECT_TIME)
		    {
			WAIT BRAND_MODEL_RECONNECT_TIME 'BRAND_MODEL_DELAY_RECONNECT'
			CALL 'BRAND_MODEL_APERTURA_PORTA'
		    }
		}
		CASE  9 : 
		CASE 17 :
		{
		    OFF[BRAND_MODEL_CONNECTED]
		    CANCEL_WAIT 'BRAND_MODEL_DELAY_RECONNECT'
		    IF (BRAND_MODEL_RECONNECT_TIME)
		    {
			WAIT BRAND_MODEL_RECONNECT_TIME 'BRAND_MODEL_DELAY_RECONNECT'
			CALL 'BRAND_MODEL_APERTURA_PORTA'
		    }
		}
	    }
	}
    }
    STRING:
    {
	WHILE (FIND_STRING(BRAND_MODEL_BUFF,BRAND_MODEL_DELIMETER,1))
	{
	    IF (BRAND_MODEL_DEBUG){
		SEND_STRING 0:1:0,"'IP BRAND_MODEL_Client_Device Receiving=',BRAND_MODEL_BUFF"
		SEND_STRING 0:1:0,"'IP BRAND_MODEL_Client_Device Receiving=',EXPLODE_HEX_STRING(BRAND_MODEL_BUFF)"
	    }
	    CALL 'BRAND_MODEL_INTERPRETA_MESSAGGIO'(REMOVE_STRING(BRAND_MODEL_BUFF,BRAND_MODEL_DELIMETER,1))
	}
    }
}

DATA_EVENT[BRAND_MODEL_vdv_Device]
{
    ONLINE:
    {
	IF ((BRAND_MODEL_Client_Device.NUMBER == 0) AND (BRAND_MODEL_Client_Device.PORT <> 0))
	    CALL 'BRAND_MODEL_APERTURA_PORTA'

	/*WAIT 300
	{
	    SEND_COMMAND BRAND_MODEL_vdv_Device,"'REINIT'"
	}*/
    }
    
    COMMAND:
    {
	BRAND_MODEL_vdv_BUFF="DATA.TEXT"
	SELECT
	{
	    ACTIVE (FIND_STRING(BRAND_MODEL_vdv_BUFF,"'IP_ADDRESS='",1)) :
	    {
		REMOVE_STRING(BRAND_MODEL_vdv_BUFF,"'IP_ADDRESS='",1)
		BRAND_MODEL_IP_ADDR="BRAND_MODEL_vdv_BUFF"
	    }
	    ACTIVE (FIND_STRING(BRAND_MODEL_vdv_BUFF,"'PASSTHRUGH='",1)) :
	    {
		REMOVE_STRING(BRAND_MODEL_vdv_BUFF,"'PASSTHRUGH='",1)
		IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'PJLINK PASSTHRUGH: ', BRAND_MODEL_vdv_BUFF"
		CALL 'BRAND_MODEL_SEND_STRING' (BRAND_MODEL_vdv_BUFF)
	    }
	    ACTIVE (FIND_STRING(BRAND_MODEL_vdv_BUFF,"'SET_POWER='",1)) :
	    {
		REMOVE_STRING(BRAND_MODEL_vdv_BUFF,"'SET_POWER='",1)
		IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'PJLINK SET_POWER: ', BRAND_MODEL_vdv_BUFF"
		CALL 'SET_POWER'(ATOI(BRAND_MODEL_vdv_BUFF))
	    }
	    ACTIVE (FIND_STRING(BRAND_MODEL_vdv_BUFF,"'SET_INPUT='",1)) :
	    {
		REMOVE_STRING(BRAND_MODEL_vdv_BUFF,"'SET_INPUT='",1)
		IF (BRAND_MODEL_DEBUG) SEND_STRING 0, "'PJLINK SET_INPUT: ', BRAND_MODEL_vdv_BUFF"
		CALL 'SET_INPUT'(BRAND_MODEL_vdv_BUFF)
	    }
	    ACTIVE (1) :
	    {
	    SWITCH (BRAND_MODEL_vdv_BUFF)
		{
		CASE 'REINIT':
		    {
		    REBUILD_EVENT()

		    CANCEL_WAIT 'BRAND_MODEL_DELAY_RECONNECT'
		    CALL 'BRAND_MODEL_CHIUSURA_PORTA'
		    IF (BRAND_MODEL_RECONNECT_TIME)
			{
			WAIT BRAND_MODEL_RECONNECT_TIME 'BRAND_MODEL_DELAY_RECONNECT'
			  CALL 'BRAND_MODEL_APERTURA_PORTA'
			}
		    }
		CASE 'DEBUG=ENABLE' : ON[BRAND_MODEL_DEBUG]
		CASE 'DEBUG=DISABLE' : OFF[BRAND_MODEL_DEBUG]
		}
	    }
	}
    }
}

TIMELINE_EVENT[TL_ID_HEARTBEAT]
{
    SWITCH(TIMELINE.SEQUENCE)
    {
	CASE 1:CALL 'BRAND_MODEL_SEND_STRING' ("GET_POWER_STRING")
	CASE 2:
	{
	    IF (CURRENT_STATUS)
		CALL 'BRAND_MODEL_SEND_STRING' ("GET_INPUT_STRING")
	    ELSE
		CALL 'BRAND_MODEL_SEND_STRING' ("GET_POWER_STRING")
	}
    }
}


BUTTON_EVENT[ADV_TP,BT_RELOAD]
{
    PUSH:
    {
	CALL 'GET_ALL_INFO'()
    }
}

DATA_EVENT[ADV_TP]
{
    ONLINE:
    {
	CALL 'GET_ALL_INFO'()
    }
}

TIMELINE_EVENT[TL_ID_FB]
{
    [ADV_TP,1] = (LAMP_STATUS)
    [ADV_TP,100] = (BRAND_MODEL_CONNECTED)
}

(***********************************************************)
(*            THE ACTUAL PROGRAM GOES BELOW                *)
(***********************************************************)
DEFINE_PROGRAM

(***********************************************************)
(*                     END OF PROGRAM                      *)
(*        DO NOT PUT ANY CODE BELOW THIS COMMENT           *)
(***********************************************************)


